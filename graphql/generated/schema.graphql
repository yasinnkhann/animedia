### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccountVerifiedRes {
  emailVerified: DateTime
  errors: [ErrorRes!]!
  id: String
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type EpisodeDetailsRes {
  air_date: String
  crew: [ShowsCrewModel!]
  episode_number: Int
  guest_stars: [ShowsCastModel!]
  id: ID
  name: String
  overview: String
  production_code: String
  runtime: Int
  season_number: Int
  still_path: String
  vote_average: Float
  vote_count: Int
}

type ErrorRes {
  message: String!
}

type GameCharacter {
  country_name: String
  description: String
  games: [ID!]!
  gender: Int
  id: ID!
  mugShotUrl: String
  mug_shot: ID
  name: String!
  species: Int
}

type GameCollections {
  games: [RelatedGame!]!
  id: ID!
  name: String!
}

type GameCompany {
  country: String
  description: String
  developed: [ID!]
  id: ID!
  logo: ID
  name: String!
  published: [ID!]
}

type GameGenre {
  id: ID!
  name: String!
}

type GamePlatform {
  id: ID!
  name: String!
}

type GamePreview {
  game: ID!
  id: ID!
  name: String
  url: String
  video_id: String
}

type GameResult {
  age_ratings: [ID]
  alternative_names: [ID]
  artworks: [ID]
  bundles: [ID]
  category: ID
  checksum: ID
  collection: ID
  collections: [ID]
  cover: ID
  coverUrl: String
  created_at: DateTime
  dlcs: [ID]
  expanded_games: [ID]
  expansions: [ID]
  external_games: [ID]
  first_release_date: BigInt
  forks: [ID]
  franchise: ID
  franchises: [ID]
  game_engines: [ID]
  game_localizations: [ID]
  game_modes: [ID]
  genres: [ID!]
  hypes: Int
  id: ID!
  involved_companies: [ID]
  keywords: [ID]
  language_supports: [ID]
  multiplayer_modes: [ID]
  name: String!
  parent_game: ID
  platforms: [ID!]
  player_perspectives: [ID]
  ports: [ID]
  rating: Float
  rating_count: Int
  release_dates: [ID]
  remakes: [ID]
  remasters: [ID]
  screenshots: [ID]
  similar_games: [ID]
  slug: String
  standalone_expansions: [ID]
  status: ID
  storyline: String
  summary: String
  tags: [ID]
  themes: [ID!]
  total_rating: Float
  total_rating_count: Int
  updated_at: DateTime
  url: String
  version_parent: ID
  version_title: String
  videos: [ID]
  websites: [ID]
}

type GameTheme {
  id: ID!
  name: String!
}

type GamesRes {
  results: [GameResult!]!
  total_results: Int!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type KnownForResult {
  adult: Boolean
  backdrop_path: String
  genre_ids: [ID]
  id: ID
  media_type: String
  original_language: String
  original_title: String
  overview: String
  poster_path: String
  release_date: String
  title: String
  video: Boolean
  vote_average: Float
  vote_count: Int
}

type MovieDetailsGenre {
  id: ID!
  name: String!
}

type MovieDetailsProdCompany {
  id: ID!
  logo_path: String
  name: String!
  origin_country: String!
}

type MovieDetailsProdCountry {
  iso_3166_1: String!
  name: String!
}

type MovieDetailsRes {
  adult: Boolean!
  backdrop_path: String
  genres: [MovieDetailsGenre!]!
  homepage: String!
  id: ID!
  imdb_id: ID
  original_language: String!
  original_title: String!
  overview: String!
  popularity: Float
  poster_path: String
  production_companies: [MovieDetailsProdCompany!]!
  production_countries: [MovieDetailsProdCountry!]!
  release_date: String
  revenue: BigInt
  runtime: Int
  spoken_languages: [MovieDetailsSpokenLang!]!
  status: String!
  tagline: String!
  title: String!
  video: Boolean
  vote_average: Float
  vote_count: Int!
}

type MovieDetailsSpokenLang {
  english_name: String!
  iso_639_1: String!
  name: String!
}

enum MovieGenreTypes {
  Action
  Adventure
  Animation
  Comedy
  Crime
  Documentary
  Drama
  Family
  Fantasy
  History
  Horror
  Music
  Mystery
  Romance
  Science_Fiction
  TV_Movie
  Thriller
  War
  Western
}

type MovieResult {
  adult: Boolean!
  backdrop_path: String
  genre_ids: [ID]
  id: ID!
  original_language: String!
  original_title: String!
  overview: String!
  popularity: Float
  poster_path: String
  release_date: String
  title: String!
  video: Boolean
  vote_average: Float
  vote_count: Int
}

type MovieReviewAuthorDetails {
  avatar_path: String
  name: String!
  rating: Float
  username: String!
}

type MovieReviewsRes {
  id: ID!
  page: Int!
  results: [MovieReviewsResult!]!
  total_pages: Int!
  total_results: Int!
}

type MovieReviewsResult {
  author: String!
  author_details: MovieReviewAuthorDetails!
  content: String!
  created_at: String!
  id: ID!
  updated_at: String!
  url: String!
}

type MoviesCastCrewRes {
  cast: [MoviesCastModel!]
  crew: [MoviesCrewModel!]
  id: ID
}

type MoviesCastModel {
  adult: Boolean
  cast_id: ID
  character: String
  credit_id: ID
  gender: Int
  id: ID
  known_for_department: String
  name: String
  order: Int
  original_name: String
  popularity: Float
  profile_path: String
}

type MoviesCrewModel {
  adult: Boolean
  credit_id: ID
  department: String
  gender: Int
  id: ID
  job: String
  known_for_department: String
  name: String
  original_name: String
  popularity: Float
  profile_path: String
}

type MoviesInTheatresRes {
  dates: TheatreDates!
  page: String!
  results: [MovieResult!]!
  total_pages: Int!
  total_results: Int!
}

type MoviesRes {
  page: Int!
  results: [MovieResult!]!
  total_pages: Int!
  total_results: Int!
}

type Mutation {
  addMovie(movieId: ID!, movieName: String!, watchStatus: WatchStatusTypes!): UserMovie
  addShow(currentEpisode: Int, showId: ID!, showName: String!, watchStatus: WatchStatusTypes!): UserShow
  changePassword(newPassword: String!, userId: ID!): RedisRes
  deleteMovie(movieId: ID!): UserMovie
  deleteShow(showId: ID!): UserShow
  registerUser(email: String!, name: String!, password: String!): RegisteredUserRes
  sendForgotPasswordEmail(email: String!): RedisRes
  sendVerificationEmail(userId: ID!): RedisRes
  updateMovie(movieId: ID!, movieRating: Int, watchStatus: WatchStatusTypes!): UserMovie
  updateShow(currentEpisode: Int, showId: ID!, showRating: Int, watchStatus: WatchStatusTypes!): UserShow
  verifyUserEmail(userId: ID!): RedisRes
}

type PeopleRes {
  page: Int!
  results: [PersonResult!]!
  total_pages: Int!
  total_results: Int!
}

type PersonDetailsRes {
  adult: Boolean
  also_known_as: [String]
  biography: String
  birthday: String
  deathday: String
  gender: Int
  homepage: String
  id: ID!
  imdb_id: ID
  known_for_department: String
  name: String
  place_of_birth: String
  popularity: Float
  profile_path: String
}

type PersonResult {
  adult: Boolean!
  gender: Int!
  id: ID!
  known_for: [KnownForResult!]!
  known_for_department: String
  name: String!
  popularity: Float!
  profile_path: String
}

type PersonsKnownForMovieCast {
  adult: Boolean!
  backdrop_path: String
  character: String
  credit_id: ID
  genre_ids: [ID]!
  id: ID!
  order: Int
  original_language: String!
  original_title: String!
  overview: String!
  popularity: Float!
  poster_path: String
  release_date: String
  title: String!
  video: Boolean!
  vote_average: Float!
  vote_count: Int!
}

type PersonsKnownForMovieCrew {
  adult: Boolean!
  backdrop_path: String
  credit_id: ID
  department: String
  genre_ids: [ID]!
  id: ID!
  job: String
  original_language: String!
  original_title: String!
  overview: String!
  popularity: Float!
  poster_path: String
  release_date: String
  title: String!
  video: Boolean!
  vote_average: Float!
  vote_count: Int!
}

type PersonsKnownForMovieRes {
  cast: [PersonsKnownForMovieCast]!
  crew: [PersonsKnownForMovieCrew]!
  id: ID
}

type PersonsKnownForShowCast {
  adult: Boolean!
  backdrop_path: String
  character: String
  credit_id: ID
  episode_count: Int
  first_air_date: String
  genre_ids: [ID]!
  id: ID!
  name: String!
  origin_country: [String]!
  original_language: String!
  original_name: String!
  overview: String!
  popularity: Float!
  poster_path: String
  vote_average: Float!
  vote_count: Int!
}

type PersonsKnownForShowCrew {
  adult: Boolean!
  backdrop_path: String
  credit_id: ID
  department: String
  episode_count: Int
  first_air_date: String
  genre_ids: [ID]!
  id: ID!
  job: String
  name: String!
  origin_country: [String]!
  original_language: String!
  original_name: String!
  overview: String!
  popularity: Float!
  poster_path: String
  vote_average: Float!
  vote_count: Int!
}

type PersonsKnownForShowRes {
  cast: [PersonsKnownForShowCast]!
  crew: [PersonsKnownForShowCrew]!
  id: ID
}

type Query {
  accountVerified(email: String!): AccountVerifiedRes
  checkEmailVerificationToken(token: String!, userId: ID!): RedisRes
  checkForgotPasswordToken(token: String!, userId: ID!): RedisRes
  dlcGames(gameIds: [ID!]!, limit: Int = 500): [RelatedGame!]
  emailFromRedisToken(token: String!): String
  episodeDetails(episodeNum: Int!, seasonNum: Int!, showId: ID!): EpisodeDetailsRes
  gameCharacters(gameId: ID!, limit: Int = 20): [GameCharacter!]!
  gameCollections(gameId: ID!): GameCollections
  gameCompany(gameId: ID!): [GameCompany]
  gameDetails(gameId: ID!): GamesRes!
  gameGenres: [GameGenre!]!
  gamePlatforms(limit: Int = 500): [GamePlatform]
  gamePreviews(gameId: ID!): [GamePreview!]
  gameThemes(limit: Int = 500): [GameTheme]
  movieDetails(movieDetailsId: ID!): MovieDetailsRes!
  movieReviews(id: ID!, page: Int = 1): MovieReviewsRes!
  moviesCastCrew(movieId: ID!): MoviesCastCrewRes
  moviesInTheatres(page: Int = 1): MoviesInTheatresRes!
  personDetails(personDetailsId: ID!): PersonDetailsRes!
  personsKnownForMovie(personsKnownForMovieResId: ID!): PersonsKnownForMovieRes!
  personsKnownForShow(personsKnownForShowResId: ID!): PersonsKnownForShowRes!
  popularAnimeMovies(page: Int = 1): MoviesRes!
  popularAnimeShows(page: Int = 1): ShowsRes!
  popularGames(limit: Int!, page: Int!): GamesRes
  popularGamesByGenre(genreId: ID!, limit: Int!, page: Int!): GamesRes
  popularMovies(page: Int = 1): MoviesRes!
  popularMoviesByGenre(genre: MovieGenreTypes!, page: Int = 1): MoviesRes!
  popularPeople(page: Int = 1): PeopleRes!
  popularShows(page: Int = 1): ShowsRes!
  popularShowsByGenre(genre: ShowGenreTypes!, page: Int = 1): ShowsRes!
  recommendedMovies(page: Int = 1, recommendedMoviesId: ID!): MoviesRes!
  recommendedShows(page: Int = 1, recommendedShowsId: ID!): ShowsRes!
  searchGameCharacters(limit: Int = 500, name: String!): SearchCharacter
  searchedGames(limit: Int!, page: Int!, q: String!): GamesRes!
  searchedMovies(page: Int = 1, q: String!): MoviesRes!
  searchedPeople(page: Int = 1, q: String!): PeopleRes!
  searchedShows(page: Int = 1, q: String!): ShowsRes!
  showDetails(showDetailsId: ID!): ShowDetailsRes!
  showReviews(id: ID!, page: Int = 1): ShowReviewRes!
  showsCastCrew(showId: ID!): ShowsCastCrewRes
  similarGames(gameIds: [ID!]!, limit: Int = 500): [RelatedGame!]
  topRatedGames(limit: Int!, page: Int!): GamesRes
  topRatedGamesByGenre(genreId: ID!, limit: Int!, page: Int!): GamesRes
  topRatedMovies(page: Int = 1): MoviesRes!
  topRatedMoviesByGenre(genre: MovieGenreTypes!, page: Int = 1): MoviesRes!
  topRatedShows(page: Int = 1): ShowsRes!
  topRatedShowsByGenre(genre: ShowGenreTypes!, page: Int = 1): ShowsRes!
  trendingMovies(page: Int = 1, timeWindow: TimeWindowTypes!): MoviesRes!
  trendingShows(page: Int = 1, timeWindow: TimeWindowTypes!): ShowsRes!
  user(id: ID!): User
  usersGame(gameId: String!): UserGame
  usersGames: [UserGame]
  usersMovie(movieId: String!): UserMovie
  usersMovies: [UserMovie]
  usersShow(showId: String!): UserShow
  usersShows: [UserShow]
}

type RedisRes {
  errors: [ErrorRes!]!
  token: String
  userId: String
}

type RegisteredUserRes {
  createdUser: User
  errors: [ErrorRes!]!
}

type RelatedGame {
  cover: ID
  coverUrl: String
  first_release_date: BigInt
  id: String!
  name: String!
  rating: Float
}

type SearchCharacter {
  results: [GameCharacter!]!
  total_results: Int
}

type ShowDetailsCountry {
  iso_3166_1: String!
  name: String!
}

type ShowDetailsCreatedBy {
  credit_id: ID
  gender: Int
  id: ID
  name: String
  profile_path: String
}

type ShowDetailsGenre {
  id: ID!
  name: String!
}

type ShowDetailsLastEpToAir {
  air_date: String
  episode_number: Int!
  id: ID!
  name: String!
  overview: String!
  production_code: String!
  runtime: Int
  season_number: Int!
  show_id: ID!
  still_path: String
  vote_average: Float
  vote_count: Int!
}

type ShowDetailsNetwork {
  id: ID!
  logo_path: String
  name: String!
  origin_country: String!
}

type ShowDetailsNextEpToAir {
  air_date: String
  episode_number: Int!
  id: ID!
  name: String!
  overview: String!
  production_code: String!
  runtime: Int
  season_number: Int!
  show_id: ID!
  still_path: String
  vote_average: Float
  vote_count: Int!
}

type ShowDetailsProdCompany {
  id: ID!
  logo_path: String
  name: String!
  origin_country: String!
}

type ShowDetailsRes {
  adult: Boolean!
  backdrop_path: String
  created_by: [ShowDetailsCreatedBy!]!
  episode_run_time: [Int]!
  first_air_date: String
  genres: [ShowDetailsGenre!]!
  homepage: String!
  id: ID!
  in_production: Boolean!
  languages: [String]!
  last_air_date: String
  last_episode_to_air: ShowDetailsLastEpToAir!
  name: String!
  networks: [ShowDetailsNetwork!]!
  next_episode_to_air: ShowDetailsNextEpToAir!
  number_of_episodes: Int!
  number_of_seasons: Int!
  origin_country: [String]!
  original_language: String!
  original_name: String!
  overview: String!
  popularity: Float
  poster_path: String
  production_companies: [ShowDetailsProdCompany!]!
  production_countries: [ShowDetailsCountry!]!
  seasons: [ShowDetailsSeason!]!
  spoken_languages: [ShowDetailsSpokenLang!]!
  status: String!
  tagline: String!
  type: String!
  vote_average: Float
  vote_count: Int
}

type ShowDetailsSeason {
  air_date: String
  episode_count: Int!
  id: ID!
  name: String!
  overview: String!
  poster_path: String
  season_number: Int!
}

type ShowDetailsSpokenLang {
  english_name: String!
  iso_639_1: String!
  name: String!
}

enum ShowGenreTypes {
  Action_AMPERSAND_Adventure
  Animation
  Comedy
  Crime
  Documentary
  Drama
  Family
  Kids
  Mystery
  News
  Reality
  SciDASHFi_AMPERSAND_Fantasy
  Soap
  Talk
  War_AMPERSAND_Politics
  Western
}

type ShowResult {
  backdrop_path: String
  first_air_date: String
  genre_ids: [ID]
  id: ID!
  name: String!
  origin_country: [String]!
  original_language: String!
  original_name: String!
  overview: String!
  popularity: Float
  poster_path: String
  vote_average: Float
  vote_count: Int!
}

type ShowReviewAuthorDetails {
  avatar_path: String
  name: String!
  rating: Float
  username: String!
}

type ShowReviewRes {
  id: ID!
  page: Int!
  results: [ShowReviewResult!]!
  total_pages: Int!
  total_results: Int!
}

type ShowReviewResult {
  author: String!
  author_details: ShowReviewAuthorDetails!
  content: String!
  created_at: String!
  id: ID!
  updated_at: String!
  url: String!
}

type ShowsCastCrewRes {
  cast: [ShowsCastModel!]
  crew: [ShowsCrewModel!]
  id: ID
}

type ShowsCastModel {
  adult: Boolean
  character: String
  credit_id: ID
  gender: Int
  id: ID
  known_for_department: String
  name: String
  order: Int
  original_name: String
  popularity: Float
  profile_path: String
}

type ShowsCrewModel {
  adult: Boolean
  credit_id: ID
  department: String
  gender: Int
  id: ID
  job: String
  known_for_department: String
  name: String
  original_name: String
  popularity: Float
  profile_path: String
}

type ShowsRes {
  page: Int!
  results: [ShowResult!]!
  total_pages: Int!
  total_results: Int!
}

type TheatreDates {
  maximum: String!
  minimum: String!
}

enum TimeWindowTypes {
  day
  week
}

type User {
  created_at: DateTime
  email: String
  emailVerified: DateTime
  id: ID
  image: String
  movies: [UserMovie]
  name: String
  password: String
  shows: [UserShow]
}

type UserGame {
  id: ID
  name: String
  rating: Int
}

type UserMovie {
  id: ID
  name: String
  rating: Int
  status: WatchStatusTypes
}

type UserShow {
  current_episode: Int
  id: ID
  name: String
  rating: Int
  status: WatchStatusTypes
}

enum WatchStatusTypes {
  COMPLETED
  DROPPED
  NOT_WATCHING
  ON_HOLD
  PLAN_TO_WATCH
  WATCHING
}