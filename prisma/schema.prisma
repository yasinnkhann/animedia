generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  created_at    DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  movies        Movies[]
  shows         Shows[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movies {
  id     String
  name   String
  status WatchStatus
  rating Int?
  userId String      @map("user_id")
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, userId])
  @@index([userId], map: "Movie_user_id_idx")
}

model Shows {
  id              String
  name            String
  current_episode Int         @default(0)
  status          WatchStatus
  rating          Int?
  userId          String      @map("user_id")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, userId])
  @@index([userId], map: "Show_user_id_idx")
}

enum WatchStatus {
  NOT_WATCHING
  WATCHING
  PLAN_TO_WATCH
  COMPLETED
  ON_HOLD
  DROPPED
}
